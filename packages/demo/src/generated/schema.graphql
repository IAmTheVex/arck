### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  emitTest: Test!
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Post {
  author: User
  post_id: String!
  title: String!
}

type PostConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [PostEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput
  content: String
  post_id: String
  title: String!
  view_count: Int
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  post_id: String
  title: String!
  view_count: Int
}

type PostEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Post!
}

input PostWhereUniqueInput {
  post_id: String
}

input ProfileCreateManyWithoutUserInput {
  connect: [ProfileWhereUniqueInput!]
  create: [ProfileCreateWithoutUserInput!]
}

input ProfileCreateWithoutUserInput {
  bio: String
  profile_id: String
}

input ProfileWhereUniqueInput {
  profile_id: String
}

type Query {
  me: User
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, skip: Int): [User!]!
}

type Subscription {
  test: Test!
}

type Test {
  t: String!
}

type User {
  gender: String
  name: String
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, skip: Int): [Post!]!
  postsConnection(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): PostConnection!
  user_id: String!
}

input UserCreateInput {
  email: String!
  gender: String
  name: String
  posts: PostCreateManyWithoutAuthorInput
  profiles: ProfileCreateManyWithoutUserInput
  user_id: String
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutPostsInput {
  email: String!
  gender: String
  name: String
  profiles: ProfileCreateManyWithoutUserInput
  user_id: String
}

input UserWhereUniqueInput {
  email: String
  user_id: String
}
